Java Oops:

Java is pure object oriented programming or not?
Java is not considered as pure object oriented programming language because several oops features (like  multiple inheritance,operator overloading) are not supported by java moreover we are depending on primitive data types which are non objects.


class:
     A Class is a template and object is an instance of that class. A class contains entire set of data and methods. It is logical entity

A class can be defined as a blueprint from which you can create an individual object.
Class doesn't consume any space.

Object:
Object is real-world entity having some state and behaviour.In java Object is an instance of the class having the  instance variable as the state of an object and methods as the behavior of the class. The object of a class can be created by using new keyword.

Abstraction:

Abstraction is process of hiding the internal details of an object or a class.
Abstraction is process of hiding the internal details and showing functionality is known as abstraction. For example phone call, We don't know the internal processing.

Hide internal implementaion and just highlight the set of services, is called abstraction
By using abstract classes and interfaces we can implement abstraction.

Example:ATM
ATM GUI screen bank people highlighting the set of services what they offering  without highlighting  internal implementation.

1). We can achieve security as we are not highlighting our internal implementation.
2)Enhancement will become very easy because without effecting end user we can able to perform any type of changes in our internal system.
3).It provides more flexibility to the end user to use system very easily.
4).It improves maintainability of the application.

Inheritance:
	    Inheritance is an importance pillar of oops (Object-oriented Programming).It is the mechanism in Java by which one class is allowed to inherit the features(fields and methods) of another class.

In Inheritance means creating new classes based on existing class.
A class inherits from another class can reuse the methods and  fields of class.
In addition, you can add new fields and methods to current class as well.
 	 

Why Do We Need Java Inheritance?
Code Reusability: The code written in the Superclass is common to all subclasses. Child classes can directly use the parent class code.

Method Overriding: Method Overriding is achievable only through Inheritance. It is one of the ways by which Java achieves Run Time Polymorphism.

Abstraction: The concept of abstract where we do not have to provide all details is achieved through inheritance. Abstraction only shows the functionality to the user.

Encapsulation:
It is the process of Encapsulating data and corresponding the methods into a single module.

If Any java class follows data hiding and abstraction such type of class is said to be encapsulated class.

 Encapsulation is the process of binding the data and code together or methods and properties together so that only those methods can access those properties.

The Two major advantages of encapsulation are security and easy maintainability or easy to enhance code.

Encapsulation is databinding and abstraction


Encapsulation in java is a process of wrapping the code and data together into a single unit,
Example, capsule which is mixed of several medicines.

Java Bean class is the example of a fully encapsulated class.

Advantage:
By providing only a setter or getter method,you can make a class read only or write only.

Datahiding:Our internal data should not go out directly that is outside person can't access our internal data directly. By using private modifier we can implement data hiding.

It is way to achieve data hiding in java because other class will not be able to access the data through the private data members.

So, it is easy and fast to create an encapsulated class in Java.
 
Polymorphism:

Polymorphism in java is concept by which we can perform a single action in different ways.

So If an object of a class can behave differently while communicating with different objects,then it is called polymorphism.

"poly" means many and "morphs" means forms polymorphism means manyforms.
there are two types of ploymorphism in Java: compile-time polymorphism and run-time polymorphism.
we can perform polymorphism in java by method overloading,method overriding.


Compile time Polymorphism(or) static binding:
Compile time polymorphism that is resolved during the compilation process.
Overloading of methods is called through the reference variable of a class.

Compile-time polymorphism is achieved by method overloading.


Runtime Polymorphism (or) Dynamic polymorphism:

Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden method is resolved at runtime rather than compile-time.

method overridding:

If subclass (child class) has the same method as declared in parent class, it is known as method overriding in java.

Method overriding in java allows a subclass to provide a specific implementation for a method that has already been declared in its parent class.
