MultiThreading:

MultiThreading in Java is process of executing multiple threads simultaneously.

A Thread is a lightweight sub-process, smallest unit of processing. Multiprocessing and multithreading, both are used to achieve multitasking.

However, we use multithreading than multiprocessing because threads use a shared memory area. They don't allocate separate memory area so saves memory, and context-switching between the threads takes less time than process.

Java Multithreading is mostly used in games, animation, etc.


Advantages of Java Multithreading
1)It doesn't block user because threads are independent and  you can perform multiple operations at the same time.

2).You can perform many operations together, so it saves time.

3).Threads are independent, so it doesn't affect other threads if an exception occurs in a single thread.

1) Process-based Multitasking (Multiprocessing)
Each process has an address in memory. In other words, each process allocates a separate memory area.

A process is heavyweight.
Cost of communication between the process is high.
Switching from one process to another requires some time for saving and loading registers, memory maps, updating lists, etc.

2) Thread-based Multitasking (Multithreading)
Threads share the same address space.
A thread is lightweight.
Cost of communication between the thread is low.

What is Thread in java
A thread is a lightweight subprocess, the smallest unit of processing. It is a separate path of execution.

Threads are independent. If there occurs exception in one thread, it doesn't affect other threads. It uses a shared memory area.

Java Thread Class:
Java provides Thread class to achieve thread programming. Thread class provides constructors and methods to create and perform operations on a thread. Thread class extends Object Class and implements Runnable interface.


 What are the states in the lifecycle of a Thread?
1.New:In this state, a Thread class object is created using a new operator, but the thread is not alive. Thread doesn't start until we call the start() method.

2.Runnable:In this state, the thread is ready to run after calling the start() method.However, the thread is not yet selected by the thread scheduler.

3.Running: In this state, the thread scheduler picks the thread from ready state, and the thread is running.

4.Waiting/Blocked:In this state, a thread is not running but still alive, or it is waiting for the other thread to finish.

5.Dead/Terminated:A thread is in terminated or dead state when run() method exits.
